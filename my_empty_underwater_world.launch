<launch>
    <arg name="gui" default="true"/>
    <arg name="paused" default="false"/>
    <arg name="set_timeout" default="false"/>
    <arg name="timeout" default="0.0"/>

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="worlds/empty_underwater.world"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
        <arg name="verbose" value="true"/>
    </include>

    <include file="$(find uuv_assistants)/launch/publish_world_ned_frame.launch"/>

	<!--<include file="$(find uuv_gazebo)/launch/rexrov_demos/rexrov_default.launch"/>-->

	<!--node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find uuv_descriptions)/urdf/rexrov.gazebo.xacro"/> -->

    <node name="publish_world_models"
        pkg="uuv_assistants"
        type="publish_world_models.py"
        output="screen">
        <rosparam subst_value="true">
            meshes:
                seafloor:
                    plane: [2000, 2000, 0.1]
                    pose:
                        position: [0, 0, -100]
                north:
                    plane: [0.1, 2000, 100]
                    pose:
                        position: [1000, 0, -50]
                south:
                    plane: [0.1, 2000, 100]
                    pose:
                        position: [-1000, 0, -50]
                west:
                    plane: [2000, 0.1, 100]
                    pose:
                        position: [0, -1000, -50]
                east:
                    plane: [2000, 0.1, 100]
                    pose:
                        position: [0, 1000, -50]
        </rosparam>
    </node>

    <group if="$(arg set_timeout)">
        <include file="$(find uuv_assistants)/launch/set_simulation_timer.launch">
            <arg name="timeout" value="$(arg timeout)"/>
        </include>
    </group>
    
    
<arg name="namespace" default="rexrov"/>
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="-70"/>
  <arg name="yaw" default="0.0"/>
  <arg name="joy_id" default="0"/>
  <arg name="axis_yaw" default="0"/>
  <arg name="axis_x" default="4"/>
  <arg name="axis_y" default="3"/>
  <arg name="axis_z" default="1"/>
  <arg name="launch_rviz" default="1"/>
  
  <include file="$(find uuv_descriptions)/launch/upload_rexrov.launch">
    <arg name="mode" value="default"/>
    <arg name="namespace" value="$(arg namespace)"/>
    <arg name="x" value="$(arg x)"/>
    <arg name="y" value="$(arg y)"/>
    <arg name="z" value="$(arg z)"/>
    <arg name="yaw" value="$(arg yaw)"/>
  </include>

  <include file="$(find uuv_thruster_manager)/launch/thruster_manager.launch">
    <arg name="uuv_name" value="$(arg namespace)" />
    <arg name="model_name" value="rexrov" />
  </include>

  <group ns="$(arg namespace)">
    <rosparam file="$(find uuv_control_cascaded_pid)/config/rexrov/inertial.yaml" command="load"/>
    <rosparam file="$(find uuv_control_cascaded_pid)/config/rexrov/vel_pid_control.yaml" command="load"/>
    
    <node pkg="uuv_control_cascaded_pid" type="AccelerationControl.py" name="acceleration_control"
            output="screen">
      <param name="tf_prefix" type="string" value="$(arg namespace)/" />
    </node>

    <node pkg="uuv_control_cascaded_pid" type="VelocityControl.py" name="velocity_control"
          output="screen">
      <remap from="odom" to="/$(arg namespace)/pose_gt"/>
      <remap from="cmd_accel" to="/$(arg namespace)/cmd_accel"/>
    </node>
  </group>
  
  <include file="$(find uuv_teleop)/launch/uuv_teleop.launch">
    <arg name="uuv_name" value="$(arg namespace)"/>
    <arg name="joy_id" value="$(arg joy_id)"/>
    <arg name="output_topic" value="cmd_vel"/>
    <arg name="message_type" value="twist"/>
    <arg name="axis_yaw" value="$(arg axis_yaw)"/>
    <arg name="axis_x" value="$(arg axis_x)"/>
    <arg name="axis_y" value="$(arg axis_y)"/>
    <arg name="axis_z" value="$(arg axis_z)"/>
  </include>

	<arg name="cmd_vel" default="rexrov/cmd_vel"/>
    <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop" output="screen">
	    <remap from="cmd_vel" to="$(arg cmd_vel)"/>
	</node>




</launch>